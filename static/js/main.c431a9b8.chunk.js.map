{"version":3,"sources":["components/Vaccinations/Vaccinations.js","containers/VaccinationsContainer.js","components/Cases/Cases.js","containers/CasesContainer.js","components/Deaths/Deaths.js","containers/DeathsContainer.js","components/Healthcare/Healthcare.js","containers/HealthcareContainer.js","components/Testing/Testing.js","containers/TestingContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Vaccinations","firstDosesDate","firstDoses","totalFirstDoses","secondDoses","totalSecondDoses","uptakeFirstDose","uptakeSecondDose","Row","className","Col","sm","VaccinationsContainer","totalFirstDosesDate","secondDosesDate","totalSecondDosesDate","numberWithCommas","x","toString","replace","firstDosesComma","secondDosesComma","totalFirstDosesComma","totalSecondDosesComma","Cases","dateCases","dailyCases","CasesContainer","cases","Deaths","dateDeaths","deaths","DeathsContainer","deathsCommas","Healthcare","dateHealthcare","admissions","HealthcareContainer","admissionsComma","Testing","dateTested","newTests","TestingContainer","tested","App","useState","date","newCases","setCases","setFirstDoses","setTotalFirstDoses","setSecondDoses","setTotalSecondDoses","setUptakeFirstDose","setUptakeSecondDose","setDeaths","admitted","healthcare","setHealthcare","testing","setTesting","useEffect","fetchCases","fetchFirstDosesDaily","fetchTotalFirstDoses","fetchSecondDosesDaily","fetchTotalSecondDoses","fetchUptakeFirstDose","fetchUptakeSecondDose","fetchDeaths","fetchHealthcare","fetchTests","a","fetch","response","data","json","then","resp","firstDosesTotal","secondDosesTotal","Container","uptakeFirstDoseDate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c431a9b8.chunk.js","sourcesContent":["import { Row, Col } from 'react-bootstrap'\r\nimport './Vaccinations.css'\r\n\r\n\r\nconst Vaccinations = ({firstDosesDate, \r\n                       firstDoses, \r\n                       totalFirstDoses, \r\n                       secondDoses, \r\n                       totalSecondDoses, \r\n                       uptakeFirstDose, \r\n                       uptakeSecondDose\r\n                    }) => {\r\n    return(\r\n        <Row className=\"VaccinationsRow\">\r\n            <Col sm={3}>\r\n                <h2>People Vaccinated</h2>\r\n                <p>Up to and including {firstDosesDate}</p>\r\n            </Col>\r\n            <Col sm={3}>\r\n                <p>Daily - 1st Dose</p>\r\n                <h3>{firstDoses}</h3> <br />\r\n                <p>Total - 1st Dose</p>\r\n                <h3>{totalFirstDoses}</h3>\r\n            </Col>\r\n            <Col sm={3}>\r\n                <p>Daily - 2nd Dose</p>\r\n                <h3>{secondDoses}</h3> <br />\r\n                <p>Total - 2nd Dose</p>\r\n                <h3>{totalSecondDoses}</h3>\r\n            </Col>\r\n            <Col sm={3}>\r\n                <p>% of population aged 16+</p>\r\n                <h3>{uptakeFirstDose}% - First Dose</h3>\r\n                <h3>{uptakeSecondDose}% - Second Dose</h3>\r\n            </Col>\r\n        </Row>\r\n    )\r\n    \r\n}\r\n\r\nexport default Vaccinations","import Vaccinations from '../components/Vaccinations/Vaccinations'\r\n\r\nconst VaccinationsContainer = ({firstDosesDate, \r\n                                firstDoses, \r\n                                totalFirstDosesDate, \r\n                                totalFirstDoses,\r\n                                secondDosesDate,\r\n                                secondDoses,\r\n                                totalSecondDoses,\r\n                                totalSecondDosesDate,\r\n                                uptakeFirstDose,\r\n                                uptakeSecondDose\r\n                            }) => {\r\n\r\n    const numberWithCommas = x => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    const firstDosesComma = numberWithCommas(firstDoses)\r\n    const secondDosesComma = numberWithCommas(secondDoses)\r\n    const totalFirstDosesComma = numberWithCommas(totalFirstDoses)\r\n    const totalSecondDosesComma = numberWithCommas(totalSecondDoses)\r\n\r\n    return(\r\n        <Vaccinations firstDosesDate={firstDosesDate} \r\n                      firstDoses={firstDosesComma} \r\n                      totalFirstDosesDate={totalFirstDosesDate}\r\n                      totalFirstDoses={totalFirstDosesComma}\r\n                      secondDosesDate={secondDosesDate}\r\n                      secondDoses={secondDosesComma}\r\n                      totalSecondDosesDate={totalSecondDosesDate}\r\n                      totalSecondDoses={totalSecondDosesComma}\r\n                      uptakeFirstDose={uptakeFirstDose}\r\n                      uptakeSecondDose={uptakeSecondDose}\r\n                      />\r\n    )\r\n}\r\n\r\nexport default VaccinationsContainer","import { Col } from 'react-bootstrap'\r\n\r\nconst Cases = ({dateCases, dailyCases}) => {\r\n    return(\r\n        <Col sm={3}>\r\n            <p>Cases</p>\r\n            <h2>People tested positive</h2>\r\n            <p>Latest data provided on {dateCases}</p>\r\n            <p>Daily</p>\r\n            <h2>{dailyCases}</h2>\r\n        </Col>\r\n    ) \r\n}\r\n\r\nexport default Cases","import Cases from '../components/Cases/Cases'\r\n\r\nconst CasesContainer = ({dateCases, dailyCases}) => {\r\n\r\n    const numberWithCommas = x => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    const cases = numberWithCommas(dailyCases)\r\n\r\n    return(\r\n        <Cases \r\n            dateCases={dateCases}\r\n            dailyCases={cases}\r\n            />\r\n    )\r\n}\r\n\r\nexport default CasesContainer","import { Col } from 'react-bootstrap'\r\n\r\nconst Deaths = ({dateDeaths, deaths}) => {\r\n    return(\r\n        <Col sm={3}>\r\n            <p>Deaths</p>\r\n            <h2>Deaths within 28 days of positive test</h2>\r\n            <p>Latest data provided on {dateDeaths}</p>\r\n            <p>Daily</p>\r\n            <h2>{deaths}</h2>\r\n        </Col>\r\n    ) \r\n}\r\n\r\nexport default Deaths","import Deaths from '../components/Deaths/Deaths'\r\n\r\nconst DeathsContainer = ({dateDeaths, deaths}) => {\r\n    \r\n    const numberWithCommas = x => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    const deathsCommas = numberWithCommas(deaths)\r\n\r\n    return(\r\n        <Deaths dateDeaths={dateDeaths} deaths={deathsCommas} />\r\n    )\r\n}\r\n\r\nexport default DeathsContainer","import { Col } from 'react-bootstrap'\r\n\r\nconst Healthcare = ({dateHealthcare, admissions}) => {\r\n    return(\r\n        <Col sm={3}>\r\n            <p>Healthcare</p>\r\n            <h2>Patients admitted</h2>\r\n            <p>Latest data provided on {dateHealthcare}</p>\r\n            <p>Daily</p>\r\n            <h2>{admissions}</h2>\r\n        </Col>\r\n    ) \r\n}\r\n\r\nexport default Healthcare","import Healthcare from '../components/Healthcare/Healthcare'\r\n\r\nconst HealthcareContainer = ({dateHealthcare, admissions}) => {\r\n    \r\n    const numberWithCommas = x => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    const admissionsComma = numberWithCommas(admissions)\r\n\r\n    return(\r\n        <Healthcare dateHealthcare={dateHealthcare} admissions={admissionsComma} />\r\n    )\r\n}\r\n\r\nexport default HealthcareContainer","import { Col } from 'react-bootstrap'\r\n\r\nconst Testing = ({dateTested, newTests}) => {\r\n    return(\r\n        <Col sm={3}>\r\n            <p>New Tests Conducted</p>\r\n            <h2>New Tests by Publish Date</h2>\r\n            <p>Latest data provided on {dateTested}</p>\r\n            <p>Daily</p>\r\n            <h2>{newTests}</h2>\r\n        </Col>\r\n    ) \r\n}\r\n\r\nexport default Testing","import Testing from '../components/Testing/Testing'\r\n\r\nconst TestingContainer = ({dateTested, tested}) => {\r\n\r\n    const numberWithCommas = x => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    const newTests = numberWithCommas(tested)\r\n\r\n    return(\r\n        <Testing dateTested={dateTested} newTests={newTests} />\r\n    )\r\n}\r\n\r\nexport default TestingContainer","import VaccinationsContainer from './containers/VaccinationsContainer'\nimport CasesContainer from './containers/CasesContainer'\nimport DeathsContainer from './containers/DeathsContainer'\nimport HealthcareContainer from './containers/HealthcareContainer'\nimport TestingContainer from './containers/TestingContainer'\nimport { Container, Row } from 'react-bootstrap'\nimport './App.css';\nimport { useEffect, useState } from 'react'\n\nfunction App() {\n\n  const [cases, setCases] = useState({\n    date: '',\n    newCases: ''\n  })\n\n  const [firstDoses, setFirstDoses] = useState({\n    date: '',\n    firstDoses: ''\n  })\n\n  const [totalFirstDoses, setTotalFirstDoses] = useState({\n    date: '',\n    totalFirstDoses: ''\n  })\n\n  const [secondDoses, setSecondDoses] = useState({\n    date: '',\n    secondDoses: ''\n  })\n\n  const [totalSecondDoses, setTotalSecondDoses] = useState({\n    date: '',\n    totalSecondDoses: ''\n  })\n\n  const [uptakeFirstDose, setUptakeFirstDose] = useState({\n    date: '',\n    uptakeFirstDose: ''\n  })\n\n  const [uptakeSecondDose, setUptakeSecondDose] = useState({\n    date: '',\n    uptakeSecondDose: ''\n  })\n\n  const [deaths, setDeaths] = useState({\n    date: '',\n    deaths: ''\n  })\n\n  const [healthcare, setHealthcare] = useState({\n    date: '',\n    admitted: ''\n  })\n\n  const [testing, setTesting] = useState({\n    date: '',\n    tested: ''\n  })\n\n  useEffect(() => {\n    fetchCases()\n    fetchFirstDosesDaily()\n    fetchTotalFirstDoses()\n    fetchSecondDosesDaily()\n    fetchTotalSecondDoses()\n    fetchUptakeFirstDose()\n    fetchUptakeSecondDose()\n    fetchDeaths()\n    fetchHealthcare()\n    fetchTests()\n  }, [])\n\n  const casesEndpoint = (\n    'https://api.coronavirus.data.gov.uk/v1/data?' +\n    'filters=areaType=nation;areaName=england&' +\n    'structure={\"date\":\"date\",\"newCases\":\"newCasesByPublishDate\"}'\n)\n\n  const vacEndpointFirstDoses = (\n    'https://api.coronavirus.data.gov.uk/v1/data?' +\n    'filters=areaType=nation;areaName=england&' +\n    `structure={\n      \"date\":\"date\",\n      \"firstDoses\":\"newPeopleVaccinatedFirstDoseByPublishDate\"}`\n)\n\n  const vacEndpointFirstDosesTotal = (\n    'https://api.coronavirus.data.gov.uk/v1/data?' +\n    'filters=areaType=nation;areaName=england&' +\n    `structure={\n      \"date\":\"date\",\n      \"firstDosesTotal\":\"cumPeopleVaccinatedFirstDoseByPublishDate\"}`\n  )\n\n  const vacEndPointSecondDoses = (\n    'https://api.coronavirus.data.gov.uk/v1/data?' +\n    'filters=areaType=nation;areaName=england&' +\n    `structure={\n      \"date\":\"date\",\n      \"secondDoses\":\"newPeopleVaccinatedSecondDoseByPublishDate\"}`\n)\n\n  const vacEndpointSecondDosesTotal = (\n    'https://api.coronavirus.data.gov.uk/v1/data?' +\n    'filters=areaType=nation;areaName=england&' +\n    `structure={\n      \"date\":\"date\",\n      \"secondDosesTotal\":\"cumPeopleVaccinatedSecondDoseByPublishDate\"}`\n  )\n\n  const vacEndpointUptakeFirstDose = (\n    'https://api.coronavirus.data.gov.uk/v1/data?' +\n    'filters=areaType=nation;areaName=england&' +\n    `structure={\n      \"date\":\"date\",\n      \"uptakeFirstDose\":\"cumVaccinationFirstDoseUptakeByPublishDatePercentage\"}`\n  )\n\n  const vacEndpointUptakeSecondDose = (\n    'https://api.coronavirus.data.gov.uk/v1/data?' +\n    'filters=areaType=nation;areaName=england&' +\n    `structure={\n      \"date\":\"date\",\n      \"uptakeSecondDose\":\"cumVaccinationSecondDoseUptakeByPublishDatePercentage\"}`\n  )\n\n  const deathsEndpointDaily = (\n    'https://api.coronavirus.data.gov.uk/v1/data?' +\n    'filters=areaType=nation;areaName=england&' +\n    `structure={\n      \"date\":\"date\",\n      \"deaths\":\"newDeaths28DaysByPublishDate\"}`\n  )\n\n  const healthcareEndpointDaily = (\n    'https://api.coronavirus.data.gov.uk/v1/data?' +\n    'filters=areaType=nation;areaName=england&' +\n    `structure={\n      \"date\":\"date\",\n      \"admitted\":\"newAdmissions\"}`\n  )\n\n  const testingEndpointDaily = (\n    'https://api.coronavirus.data.gov.uk/v1/data?' +\n    'filters=areaType=nation;areaName=england&' +\n    `structure={\n      \"date\":\"date\",\n      \"tested\":\"newTestsByPublishDate\"}`\n  )\n\n  const fetchCases = async () => {\n      const response = await fetch(casesEndpoint)\n      const data = response.json()\n      return data.then((resp) => {\n        setCases({\n          date: resp.data[0].date,\n          newCases: resp.data[0].newCases\n        })\n      })\n  }\n\n  const fetchFirstDosesDaily = async () => {\n    const response = await fetch(vacEndpointFirstDoses)\n    const data = response.json()\n    return data.then((resp) => {\n      setFirstDoses({\n        date: resp.data[0].date,\n        firstDoses: resp.data[0].firstDoses\n      })\n    })\n  }\n\n  const fetchTotalFirstDoses = async () => {\n    const response = await fetch(vacEndpointFirstDosesTotal)\n    const data = response.json()\n    return data.then((resp) => {\n      setTotalFirstDoses({\n        date: resp.data[0].date,\n        totalFirstDoses: resp.data[0].firstDosesTotal\n      })\n    })\n  }\n\n  const fetchSecondDosesDaily = async () => {\n    const response = await fetch(vacEndPointSecondDoses)\n    const data = response.json()\n    return data.then((resp) => {\n      setSecondDoses({\n        date: resp.data[0].date,\n        secondDoses: resp.data[0].secondDoses\n      })\n    })\n  }\n\n  const fetchTotalSecondDoses = async () => {\n    const response = await fetch(vacEndpointSecondDosesTotal)\n    const data = response.json()\n    return data.then((resp) => {\n      setTotalSecondDoses({\n        date: resp.data[0].date,\n        totalSecondDoses: resp.data[0].secondDosesTotal\n      })\n    })\n  }\n\n  const fetchUptakeFirstDose = async () => {\n    const response = await fetch(vacEndpointUptakeFirstDose)\n    const data = response.json()\n    return data.then((resp) => {\n      setUptakeFirstDose({\n        date: resp.data[0].date,\n        uptakeFirstDose: resp.data[0].uptakeFirstDose\n      })\n    })\n  }\n\n  const fetchUptakeSecondDose = async () => {\n    const response = await fetch(vacEndpointUptakeSecondDose)\n    const data = response.json()\n    return data.then((resp) => {\n      setUptakeSecondDose({\n        date: resp.data[0].date,\n        uptakeSecondDose: resp.data[0].uptakeSecondDose\n      })\n    })\n  }\n\n  const fetchDeaths = async () => {\n    const response = await fetch(deathsEndpointDaily)\n    const data = response.json()\n    return data.then((resp) => {\n      setDeaths({\n        date: resp.data[0].date,\n        deaths: resp.data[0].deaths\n      })\n    })\n  }\n\n  const fetchHealthcare = async () => {\n    const response = await fetch(healthcareEndpointDaily)\n    const data = response.json()\n    return data.then((resp) => {\n      setHealthcare({\n        date: resp.data[0].date,\n        admitted: resp.data[0].admitted\n      })\n    })\n  }\n\n  const fetchTests = async () => {\n    const response = await fetch(testingEndpointDaily)\n    const data = response.json()\n    return data.then((resp) => {\n      setTesting({\n        date: resp.data[0].date,\n        tested: resp.data[0].tested\n      })\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Covid-19 England</h1>\n      </header>\n      <Container className=\"VaccinationsContainer\">\n        <VaccinationsContainer firstDosesDate={firstDoses.date} \n                               firstDoses={firstDoses.firstDoses}\n                               totalFirstDosesDate={totalFirstDoses.date}\n                               totalFirstDoses={totalFirstDoses.totalFirstDoses}\n                               secondDosesDate={secondDoses.date}\n                               secondDoses={secondDoses.secondDoses}\n                               totalSecondDosesDate={totalSecondDoses.date}\n                               totalSecondDoses={totalSecondDoses.totalSecondDoses}\n                               uptakeFirstDoseDate={uptakeFirstDose.date}\n                               uptakeFirstDose={uptakeFirstDose.uptakeFirstDose}\n                               uptakeSecondDose={uptakeSecondDose.uptakeSecondDose}\n                               />\n        <Row>\n          <CasesContainer dateCases={cases.date} dailyCases={cases.newCases}/>\n          <DeathsContainer dateDeaths={deaths.date} deaths={deaths.deaths} />\n          <HealthcareContainer dateHealthcare={healthcare.date} admissions={healthcare.admitted} />\n          <TestingContainer dateTested={testing.date} tested={testing.tested} />\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}